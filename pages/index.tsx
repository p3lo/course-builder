import axios from 'axios';
import produce from 'immer';
import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import { useRecoilState, useResetRecoilState } from 'recoil';
import slugify from 'slugify';
import { supabase } from '../lib/supabaseClient';
import { courseBuildAtom } from '../recoil/atoms/courseBuildAtom';
import { FullCourse, CourseName } from '../types';

const Home: React.FC<{ courses: CourseName[] }> = ({ courses }) => {
  const [courseTitle, setCourseTitle] = useState<string>('');
  const [pulledCourses, setPulledCourses] = useState<CourseName[]>(courses);
  const [courseInfo, setCourseInfo] = useRecoilState<FullCourse>(courseBuildAtom);
  const router = useRouter();
  const [session, setSession] = useState(null);
  const resetList = useResetRecoilState(courseBuildAtom);

  useEffect(() => {
    setSession(supabase.auth.session());
    resetList();
    supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
    });
  }, [resetList]);

  const createCourse = () => {
    if (!courseTitle) {
      return;
    }

    const slug = slugify(courseTitle, { lower: true });
    const setSlug = produce(courseInfo, (draft) => {
      draft.slug = slug;
      draft.title = courseTitle;
    });
    setCourseInfo(setSlug);
    router.push(`/builder/${slug}`);
  };

  const deleteCourse = async (id: number) => {
    const { data, error } = await supabase.from('courses').delete().match({ id });
    console.log(data, error);
    if (!error) {
      const index = pulledCourses.findIndex((item) => item.id === id);
      const removeItem = produce(pulledCourses, (draft) => {
        draft = draft.splice(index, 1);
      });
      setPulledCourses(removeItem);
    }
  };

  return (
    <div className="w-full screen-h">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div>
        {session ? (
          <button
            onClick={() => {
              supabase.auth.signOut();
              router.push('/');
            }}
          >
            Sign out
          </button>
        ) : (
          <button onClick={() => router.push('/login')}>Sign in</button>
        )}
        <input
          type="text"
          className="p-3 border outline-none"
          value={courseTitle}
          onChange={(e) => setCourseTitle(e.target.value)}
        />
        <button className="p-3 mb-3 border" onClick={createCourse}>
          Create course
        </button>
        <p className="mt-10">Authored Courses</p>
        {pulledCourses.map((item) =>
          item.author.id === session?.user.id ? (
            <div className="flex space-x-2" key={item.id}>
              <p>
                {item.title} {item.slug}
              </p>
              <button className="p-3 border" onClick={() => deleteCourse(item.id)}>
                Delete
              </button>
              <Link href={`/builder/${item.slug}`}>
                <a className="p-3 border">Edit course</a>
              </Link>
            </div>
          ) : null
        )}
        <p className="mt-10">All Courses</p>
        {pulledCourses.map((item) => (
          <div className="flex space-x-2" key={item.id}>
            <p>
              {item.title} {item.slug}
            </p>
            {item.author.id === session?.user.id && (
              <div className="flex space-x-2">
                <button className="p-3 border" onClick={() => deleteCourse(item.id)}>
                  Delete
                </button>

                <Link href={`/builder/${item.slug}`}>
                  <a className="p-3 border">Edit course</a>
                </Link>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};
export default Home;

export async function getServerSideProps({ req }) {
  const { user } = await supabase.auth.api.getUserByCookie(req);

  const { data, error } = await supabase.from('courses').select(`*, author(*), subcategory(name, main_category(name))`);
  // console.log(JSON.stringify(data[0], null, 2), error);
  // console.log(data);
  return {
    props: {
      courses: JSON.parse(JSON.stringify(data)),
    },
  };
}
