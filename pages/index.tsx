import axios from 'axios';
import produce from 'immer';
import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import { useRecoilState } from 'recoil';
import slugify from 'slugify';
import dbConnect from '../lib/dbConnect';
import course from '../models/course';
import { courseBuildAtom } from '../recoil/atoms/courseBuildAtom';
import { CourseType, CourseName } from '../types';
import { useSession, signIn, signOut, getSession } from 'next-auth/react';
import user from '../models/user';
import { getToken } from 'next-auth/jwt';
import mongoose from 'mongoose';

const Home: React.FC<{ courses: CourseName[]; authoredCourses: CourseName[] }> = ({ courses, authoredCourses }) => {
  const [courseTitle, setCourseTitle] = useState<string>('');
  const [pulledCourses, setPulledCourses] = useState<CourseName[]>(courses);
  const [courseInfo, setCourseInfo] = useRecoilState<CourseType>(courseBuildAtom);
  const router = useRouter();
  const { data: session } = useSession();

  // useEffect(() => {
  //   axios.get('/api/user/getId').then((message) => console.log());
  // }, []);

  const createCourse = () => {
    if (!courseTitle) {
      return;
    }
    const slug = slugify(courseTitle, { lower: true });
    const setSlug = produce(courseInfo, (draft) => {
      draft.slug = slug;
      draft.courseName = courseTitle;
    });
    setCourseInfo(setSlug);
    router.push(`/builder/${slug}`);
  };

  const deleteBySlug = (slug: string): void => {
    axios.delete(`/api/courseBuilder/${slug}`).then((response) => {
      if (response.data.success) {
        const index = pulledCourses.findIndex((item) => item.slug === slug);
        const removeItem = produce(pulledCourses, (draft) => {
          draft = draft.splice(index, 1);
        });
        setPulledCourses(removeItem);
      }
    });
  };

  return (
    <div className="w-full screen-h">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div>
        {session ? (
          <button onClick={() => signOut()}>Sign out</button>
        ) : (
          <button onClick={() => signIn()}>Sign in</button>
        )}
        <input
          type="text"
          className="p-3 border outline-none"
          value={courseTitle}
          onChange={(e) => setCourseTitle(e.target.value)}
        />
        <button className="p-3 mb-3 border" onClick={createCourse}>
          Create course
        </button>
        <p className="mt-10">Authored Courses</p>
        {authoredCourses.map((item, key) => (
          <div className="flex space-x-2" key={key}>
            <p>
              {item.courseName} {item.slug}
            </p>
            <button className="p-3 border" onClick={() => deleteBySlug(item.slug)}>
              Delete
            </button>
            <Link href={`/builder/${item.slug}`}>
              <a className="p-3 border">Edit course</a>
            </Link>
          </div>
        ))}
        <p className="mt-10">All Courses</p>
        {pulledCourses.map((item, key) => (
          <div className="flex space-x-2" key={key}>
            <p>
              {item.courseName} {item.slug}
            </p>
            {authoredCourses.filter((course) => course.slug === item.slug).length > 0 && (
              <div className="flex space-x-2">
                <button className="p-3 border" onClick={() => deleteBySlug(item.slug)}>
                  Delete
                </button>
                <Link href={`/builder/${item.slug}`}>
                  <a className="p-3 border">Edit course</a>
                </Link>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};
export default Home;

export async function getServerSideProps({ req }) {
  const token = await getToken({ req, secret: process.env.JWT_SECRET });
  await dbConnect();
  let authoredCourses: CourseName[] = [];
  if (token) {
    const createdCoursesIds = await user
      .findOne({ _id: new mongoose.Types.ObjectId(token.sub) })
      .select('createdCourses -_id');
    authoredCourses = await course
      .find({ _id: { $in: createdCoursesIds.createdCourses } })
      .select('slug courseName -_id');
  }

  const courses: CourseName[] = await course.find().select('slug courseName');
  return {
    props: {
      courses: JSON.parse(JSON.stringify(courses)),
      authoredCourses: JSON.parse(JSON.stringify(authoredCourses)),
    },
  };
}
